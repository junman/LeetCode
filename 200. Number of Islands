class Solution { 
    
    struct in2
{
    int x;
    int y;
};
public:
int numIslands(vector<vector<char>> & grid) 
{
    if(grid.size()==0)
    {
        return 0;
    }
    vector<vector<char> > biaoji(grid.size(),vector<char>(grid[0].size(),'0'));
    int gen=0;
    int result=0;
    for(int i=0;i<grid.size();i++)
    {
        for(int j=0;j<grid[0].size();j++)
        {
            bpf(gen , i , j , grid , biaoji);
            result=result+gen;                              //在这里翻车了很多次。。。
            gen=0;
        }
    }
    return result;
}

void bpf(int& gen,int x,int y,vector<vector<char>> & grid,vector<vector<char>> & biaoji)
{
    queue<in2> q;
    if (grid[x][y]=='0')
    {
        return;
    }
    if (biaoji[x][y]=='1')
    {
        return;
    }
    in2 t={x,y};
    gen=1;
    q.push(t);
    while(!q.empty())
    {
        in2 p=q.front();
        q.pop();
        if (grid[p.x][p.y]=='0'||biaoji[p.x][p.y]=='1')
        {
            continue;
        }
        else
        {
            biaoji[p.x][p.y]='1'; 
            if((p.x-1)>=0)            
            {
                q.push({p.x-1,p.y});
            }            
            if((p.x+1)<grid.size())
            {
                q.push({p.x+1,p.y});
            }
            if((p.y-1)>=0)
            {
                q.push({p.x,p.y-1});
            }
            if((p.y+1)<grid[0].size())
            {
                q.push({p.x,p.y+1});
            }   
        }
    }
}
};
