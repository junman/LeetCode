class Solution {   //广度遍历！！！！标记一次只能访问一次
    
    struct in2
{
    int x;
    int y;
};
public:
int maxAreaOfIsland(vector<vector<int>>& grid) {
        vector<vector<int> > biaoji(grid.size(),vector<int> (grid[0].size(),0));
        int gen=0;
        int result=0;
        for(int i=0;i<grid.size();i++)
        {
            for(int j=0;j<grid[0].size();j++)
            {
                bpf(gen , i , j , grid , biaoji);
                if(gen>result)
                {
                    result=gen;
                }
                gen=0;
            }
        }
        return result;
}

void bpf(int& gen,int x,int y,vector<vector<int>>& grid,vector<vector<int>>& biaoji)
{
    queue<in2> q;
    if (grid[x][y]==0)
    {
        return;
    }
    if (biaoji[x][y]==1)
    {
        return;
    }
    in2 t={x,y};
    q.push(t);
    while(!q.empty())
    {
        in2 p=q.front();
        q.pop();
        if (grid[p.x][p.y]==0||biaoji[p.x][p.y]==1)
        {
            continue;
        }
        else
        {
            gen++;
            biaoji[p.x][p.y]=1;  //标记已经访问过了
            if(p.x-1>=0)  //符合边界条件
            {
                q.push({p.x-1,p.y});
            }
            if(p.x+1<grid.size())
            {
                q.push({p.x+1,p.y});
            }
            if(p.y-1>=0)
            {
                q.push({p.x,p.y-1});
            }
            if(p.y+1<grid[0].size())
            {
                q.push({p.x,p.y+1});
            }   
        }
    }
}
};
