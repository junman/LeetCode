这道题的题意是合并两个二叉树，做加法，我用的是递归法，递归法最重要的就是一点：递归结束的情况，什么时候结束？两个树上那个节点为空，那么直接返回NULL就可以
了，当时我竟然犹豫函数是否可以返回NULL，当有一只树上是空就返回另外一棵树的该节点的指针就可以了，主要问题都解决了，但是这道题目可以使用迭代法，迭代法主要
是一个值推出另一个值，而递归主要是使用代码的结构，重复使用代码计算，但是深入过多就会出现栈溢出的弱点。
主要代码：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {
        if(t1==NULL&&t2==NULL)
            return NULL;
        int val=0;
        if(t1!=NULL&&t2!=NULL)
        {
            val=t1->val+t2->val;
            TreeNode*t=new TreeNode(val);
            t->left=mergeTrees(t1->left,t2->left);
            t->right=mergeTrees(t1->right,t2->right);
            return t;
        }
        if(t2==NULL)
            return t1;
        if(t1==NULL)
            return t2;
    }
};
使用迭代法主要是使用一个堆栈存储一个节点的左右两个节点的指针，然后出栈入栈就行了，直到栈空！具体方法查看具体题目。
